# trading_bot.py
"""
Trading bot entry point with SmartAPI session bootstrap.

How it works:
1. Calls ensure_session() from smartapi_session_manager.py (this will refresh or prompt for login/TOTP).
2. Loads session.json and sets api.setAccessToken(jwtToken) etc.
3. Proceeds to run the bot logic inside main().

Replace the BOT LOGIC placeholder with your existing trading_bot code (or import and call your functions).
"""

import os
import json
import sys
import time
import logging

# Import the session manager's ensure_session (this will prompt for credentials/TOTP if needed)
try:
    from smartapi_session_manager import ensure_session
except Exception as e:
    print("❌ Could not import ensure_session from smartapi_session_manager.py:", e)
    sys.exit(1)

# Import SmartConnect (handle both package name variants)
try:
    from SmartApi.smartConnect import SmartConnect
except Exception:
    try:
        from smartapi.smartConnect import SmartConnect
    except Exception as e:
        print("❌ Could not import SmartConnect from smartapi packages:", e)
        sys.exit(1)


LOG = logging.getLogger("trading_bot")
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s")


def bootstrap_session():
    """
    Ensure a valid session exists and return a configured SmartConnect instance.
    This will call ensure_session() which handles refresh/manual login & token exchange.
    """
    # 1) Ensure session manager has prepared tokens (may prompt for TOTP if needed)
    LOG.info("Ensuring SmartAPI session is ready...")
    ok = ensure_session()
    if not ok:
        LOG.error("Could not establish SmartAPI session. Exiting.")
        raise SystemExit(1)

    # 2) Load session.json
    try:
        with open("session.json", "r") as f:
            session = json.load(f)
    except Exception as e:
        LOG.error("Failed to read session.json after ensure_session(): %s", e)
        raise SystemExit(1)

    # 3) Get API key from environment
    api_key = os.environ.get("SMARTAPI_KEY")
    if not api_key:
        LOG.error("SMARTAPI_KEY environment variable not set. Exiting.")
        raise SystemExit(1)

    # 4) Create and configure SmartConnect
    api = SmartConnect(api_key=api_key)

    jwt_token = session.get("jwtToken")
    refresh_token = session.get("refreshToken")
    feed_token = session.get("feedToken")

    if not jwt_token:
        LOG.error("No jwtToken present in session.json - please re-run the session manager.")
        raise SystemExit(1)

    try:
        api.setAccessToken(jwt_token)
        if refresh_token:
            try:
                api.setRefreshToken(refresh_token)
            except Exception:
                LOG.debug("api.setRefreshToken not supported by SDK version; continuing.")
        if feed_token:
            try:
                api.setFeedToken(feed_token)
            except Exception:
                LOG.debug("api.setFeedToken not supported by SDK version; continuing.")
    except Exception as e:
        LOG.error("Failed to set tokens on SmartConnect: %s", e)
        raise SystemExit(1)

    LOG.info("✅ SmartAPI session initialized for client: %s", session.get("clientcode"))
    return api, session


def main():
    """
    Main bot flow.
    Replace the placeholder below with your existing trading routines.
    The `api` object is a configured SmartConnect ready to call endpoints like api.holding(), api.orderBook(), etc.
    """
    api, session = bootstrap_session()

    # === YOUR BOT LOGIC HERE ===
    # Replace the block below with your existing trading_bot code or call your functions
    # Example safe read-only checks:
    try:
        LOG.info("Running a quick holdings check as smoke test...")
        resp = api.holding()
        if isinstance(resp, dict):
            status = resp.get("status") if "status" in resp else resp.get("success")
            LOG.info("Holdings status: %s", status)
        else:
            LOG.warning("Holdings returned unexpected type: %s", type(resp))
    except Exception as e:
        LOG.error("Exception during holdings check: %s", e)

    # --- Example loop skeleton for bot running (customize as needed) ---
    # while True:
    #     # fetch market data
    #     # run strategies
    #     # place orders via api
    #     time.sleep(5)
    #
    # Replace the above with your actual trading logic or import and call it.
    # ============================

    LOG.info("Bot startup complete. Replace placeholder logic with your trading code.")


if __name__ == "__main__":
    main()
