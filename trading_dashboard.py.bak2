# trading_dashboard.py
# Workable Streamlit dashboard: candlestick chart + extended persistent journal

import streamlit as st
import pandas as pd
from pathlib import Path
from datetime import datetime
import plotly.graph_objects as go
import io
# Dashboard title and quick debug
st.title("AUTO TRADING TRACKER")
st.markdown("<b>HTML RENDER TEST – should be bold</b>", unsafe_allow_html=True)
# --- SAFEGUARD: ensure trades dataframe exists and restore paths ---
import os

BASE_DIR = Path(__file__).parent.resolve()
journal_path = BASE_DIR / "journal.csv"

if journal_path.exists():
    try:
        df_trades = pd.read_csv(journal_path)
    except Exception:
        # fallback if CSV corrupt
        df_trades = pd.DataFrame([
            {"date": "2025-09-09", "symbol": "RELIANCE", "entry_price": 2500, "exit_price": 2512, "pnl": 900},
            {"date": "2025-09-09", "symbol": "TCS", "entry_price": 3450.5, "exit_price": 3440, "pnl": -787.5},
        ])
else:
    # sample data so UI always renders
    df_trades = pd.DataFrame([
        {"date": "2025-09-09", "symbol": "RELIANCE", "entry_price": 2500, "exit_price": 2512, "pnl": 900},
        {"date": "2025-09-09", "symbol": "TCS", "entry_price": 3450.5, "exit_price": 3440, "pnl": -787.5},
    ])

# --- Hide Streamlit default top-right menu/header/footer (so we can show our custom header) ---
hide_streamlit_style = """
    <style>
    #MainMenu {visibility: hidden !important;}
    header {visibility: hidden !important;}
    footer {visibility: hidden !important;}
    </style>
"""
st.markdown(hide_streamlit_style, unsafe_allow_html=True)

# --- Add custom top header (navy + saffron logo + login button) ---
# --- Single full-width custom header (sits to the right of the sidebar) ---
# Adjust `--sidebar-width` below if your sidebar is wider/narrower.
st.markdown(
    """
    <style>
    :root {
        --sidebar-width: 280px;    /* change this value if your sidebar is wider */
        --header-height: 72px;
    }

    /* place header to the right of Streamlit sidebar and span the rest of the page */
    .custom-topbar {
        box-sizing: border-box;
        position: relative;
        margin-left: var(--sidebar-width);
        width: calc(100% - var(--sidebar-width));
        height: var(--header-height);
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 12px 28px;
        border-radius: 12px;
        background: linear-gradient(90deg,#0d1b4c,#0b2340);
        color: #ffffff;
        font-weight: 700;
        z-index: 999;
    }

    /* keep the inner logo compact */
    .custom-topbar .logo {
        display:flex;
        align-items:center;
        gap:14px;
    }
    .custom-topbar .logo .mark {
        width:44px;height:44px;border-radius:10px;
        background:#f57c00;display:flex;align-items:center;
        justify-content:center;font-weight:800;color:white;font-size:16px;
    }
    .custom-topbar .title {
        font-size:20px; letter-spacing:0.6px;
    }

    /* subtle login button */
    .custom-topbar .login button {
        background: rgba(255,255,255,0.06);
        color: white;
        border: 1px solid rgba(255,255,255,0.12);
        padding:8px 12px;
        border-radius:8px;
    }

    /* small responsive tweak: reduce sidebar width on small screens */
    @media (max-width: 1100px) {
      :root { --sidebar-width: 220px; }
    }
    </style>

    <div class="custom-topbar" role="banner" aria-label="topbar">
      <div class="logo" aria-hidden="true">
        <div class="mark">AT</div>
        <div>
          <div class="title">AUTO TRADING TRACKER</div>
          <div style="font-size:12px;color:rgba(255,255,255,0.75);margin-top:2px;">Demo</div>
        </div>
      </div>
      <div class="login"><button>Login</button></div>
    </div>
    """,
    unsafe_allow_html=True
)


# --- Ensure df_trades exists (safe fallback) ---
import pandas as pd
from pathlib import Path

BASE_DIR = Path(__file__).parent.resolve()
journal_path = BASE_DIR / "journal.csv"

if journal_path.exists():
    try:
        df_trades = pd.read_csv(journal_path, parse_dates=True)
    except Exception:
        # if CSV is malformed, fall back to sample
        df_trades = pd.DataFrame([
            {"date":"2025-09-09","symbol":"RELIANCE","entry_price":2500,"exit_price":2512,"pnl":900},
            {"date":"2025-09-09","symbol":"TCS","entry_price":3450.5,"exit_price":3440,"pnl":-787.5},
        ])
else:
    # sample data so UI can render while you work
    df_trades = pd.DataFrame([
        {"date":"2025-09-09","symbol":"RELIANCE","entry_price":2500,"exit_price":2512,"pnl":900},
        {"date":"2025-09-09","symbol":"TCS","entry_price":3450.5,"exit_price":3440,"pnl":-787.5},
    ])

# --- Ensure project paths exist (restore if accidentally removed) ---
from pathlib import Path

# Project base directory (script folder)
BASE_DIR = Path(__file__).parent.resolve()

# Common paths used by the dashboard
price_path = BASE_DIR / "price_data.csv"
journal_path = BASE_DIR / "journal.csv"

def to_csv_bytes(df):
    """Return CSV bytes for download (UTF-8)."""
    return df.to_csv(index=False).encode("utf-8")
# --- Theme / global CSS (deep-navy background, saffron/orange, india-green, white) ---
# --- Replace the whole THEME_CSS block below (copy everything) ---
# --- Theme / global CSS ---
THEME_CSS = """
:root{
  --navy:#0d1b4c;      /* deep navy blue */
  --saffron:#f57c00;   /* saffron / orange */
  --india-green:#2e7d32; /* India-like green */
  --card-white:#ffffff;
  --muted:#9aa7b2;
  --radius:12px;
}

/* Top header bar */
[data-testid="stHeader"], header[role="banner"] {
  background: var(--navy) !important;
  color: white !important;
  border-radius: 12px !important;
}

/* Sidebar background */
[data-testid="stSidebar"] {
  background: var(--navy) !important;
  color: white !important;
}

/* Sidebar inputs */
[data-testid="stSidebar"] input,
[data-testid="stSidebar"] .stTextInput input,
[data-testid="stSidebar"] .stSelectbox,
[data-testid="stSidebar"] .stNumberInput input,
[data-testid="stSidebar"] textarea {
  background: #ffffff !important;
  color: #0b2340 !important;
  border-radius: 8px !important;
}

/* Sidebar small text */
[data-testid="stSidebar"] .css-1d391kg,
[data-testid="stSidebar"] label,
[data-testid="stSidebar"] .stMarkdown {
  color: rgba(255,255,255,0.85) !important;
}

/* Table header saffron */
.stDataFrame thead th, table thead th {
  background: var(--saffron) !important;
  color: #fff !important;
  font-weight: 700 !important;
  border-bottom: 2px solid rgba(11,35,64,0.12) !important;
}
"""

# Inject CSS into Streamlit
st.markdown(f"<style>{THEME_CSS}</style>", unsafe_allow_html=True)
# custom header (navy gradient, saffron logo, login button)
st.markdown(
    """
    <div style="display:flex;align-items:center;justify-content:space-between;
                background: linear-gradient(90deg, var(--navy), #0b2340);
                padding:12px 18px; border-radius:12px; color: white; margin: 18px 40px;">
      <div style="display:flex;align-items:center;gap:12px;">
        <div style="width:40px;height:40px;border-radius:8px;
                    background:var(--saffron);display:flex;align-items:center;
                    justify-content:center;font-weight:700;color:white;">
          AT
        </div>
        <div style="color:var(--muted);font-size:12px;margin-left:8px;">Demo</div>
      </div>

      <div>
        <button style="background: rgba(255,255,255,0.06);
                       color: white; border: 1px solid rgba(255,255,255,0.12);
                       padding:8px 12px; border-radius:8px;">
          Login
        </button>
      </div>
    </div>
    """,
    unsafe_allow_html=True
)



# ---------------- Sidebar (controls + actions) ----------------
with st.sidebar:
    st.header("Controls")
    symbol = st.text_input("Symbol (e.g. NIFTY)", value="NIFTY")
    timeframe = st.selectbox("Timeframe", ["1m", "5m", "15m", "1h", "1d"])
    st.markdown(f"**Project folder:** `{BASE_DIR}`")
    st.markdown("---")

    if st.button("Run backtest (placeholder)"):
        st.info("Backtest: placeholder  we'll add the runner later.")

    st.markdown("### Trade actions")

    # ----------------- New trade (mock) that saves extended journal -----------------
    if st.button("New trade (mock)"):
        new_trade = {
            "entry_time": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "exit_time": "",                # empty for now, can be updated later
            "symbol": symbol,
            "qty": 75,
            "side": "BUY",
            "entry_price": None,
            "exit_price": None,
            "pnl": 0.0,
            "notes": ""
        }

        # Append to CSV (create if doesn't exist)
        if journal_path.exists():
            try:
                dfj = pd.read_csv(journal_path)
                dfj = pd.concat([dfj, pd.DataFrame([new_trade])], ignore_index=True)
            except Exception:
                dfj = pd.DataFrame([new_trade])
        else:
            dfj = pd.DataFrame([new_trade])

        # Ensure consistent column order
        cols = ["entry_time", "exit_time", "symbol", "qty", "side", "entry_price", "exit_price", "pnl", "notes"]
        dfj = dfj.reindex(columns=cols)
        dfj.to_csv(journal_path, index=False)
        st.success("New trade saved to journal.csv (extended format)")

    st.markdown("---")
    st.write("Quick actions")
    if st.button("Create sample price CSV"):
        sample = [
            {"datetime": "2025-09-09 09:15:00", "open": 19450, "high": 19480, "low": 19430, "close": 19460, "volume": 1200},
            {"datetime": "2025-09-09 09:16:00", "open": 19460, "high": 19490, "low": 19455, "close": 19480, "volume": 900},
            {"datetime": "2025-09-09 09:17:00", "open": 19480, "high": 19500, "low": 19470, "close": 19495, "volume": 1100},
            {"datetime": "2025-09-09 09:18:00", "open": 19495, "high": 19510, "low": 19490, "close": 19500, "volume": 950},
            {"datetime": "2025-09-09 09:19:00", "open": 19500, "high": 19520, "low": 19495, "close": 19510, "volume": 1250},
        ]
        pd.DataFrame(sample).to_csv(price_path, index=False)
        st.success(f"Sample price CSV created at `{price_path}`")

# ---------------- Main layout ----------------
col1, col2 = st.columns([2, 1])

# Try to load price CSV (located next to script)
loaded = False
if price_path.exists():
    try:
        df = pd.read_csv(price_path, parse_dates=["datetime"])
        df = df.sort_values("datetime").set_index("datetime")
        loaded = True
    except Exception as e:
        st.error(f"Error loading CSV: {e}")
else:
    pass  # show a small hint later# ---------------- Indicator calculations + sidebar controls ----------------
loaded_indicators = {"ema9": False, "ema21": False, "vwap": False, "rsi": False}
rsi_period = 14

if loaded:
    # safe copy
    df = df.copy()

    # EMA helper
    df["ema9"] = df["close"].ewm(span=9, adjust=False).mean()
    df["ema21"] = df["close"].ewm(span=21, adjust=False).mean()

    # VWAP (typical price * volume cumulative / volume cumulative) per session/simple approach
    # requires volume column; if missing, create placeholder
    if "volume" not in df.columns:
        df["volume"] = 1.0
    tp = (df["high"] + df["low"] + df["close"]) / 3.0
    df["vwap"] = (tp * df["volume"]).cumsum() / df["volume"].cumsum()

    # RSI (14) simple implementation
    delta = df["close"].diff().fillna(0)
    gain = delta.where(delta > 0, 0.0)
    loss = -delta.where(delta < 0, 0.0)
    roll_up = gain.rolling(window=14, min_periods=1).mean()
    roll_down = loss.rolling(window=14, min_periods=1).mean()
    rs = roll_up / (roll_down.replace(0, 1e-8))
    df["rsi"] = 100.0 - (100.0 / (1.0 + rs))
    
    # Put df back into a variable available for plotting (we'll use it later)
    indicators_df = df

    # Sidebar controls for indicators (kept minimal)
    with st.sidebar:
        st.markdown("### Indicators")
        loaded_indicators["ema9"] = st.checkbox("EMA (9)", value=True)
        loaded_indicators["ema21"] = st.checkbox("EMA (21)", value=True)
        loaded_indicators["vwap"] = st.checkbox("VWAP", value=True)
        loaded_indicators["rsi"] = st.checkbox("RSI (14)", value=True)
        if loaded_indicators["rsi"]:
            rsi_period = st.number_input("RSI period", min_value=7, max_value=30, value=14, step=1)
            # if user changes period, recompute rsi quickly
            if rsi_period != 14:
                roll_up = gain.rolling(window=rsi_period, min_periods=1).mean()
                roll_down = loss.rolling(window=rsi_period, min_periods=1).mean()
                rs = roll_up / (roll_down.replace(0, 1e-8))
                indicators_df["rsi"] = 100.0 - (100.0 / (1.0 + rs))
else:
    # ensure variables exist even when no CSV
    indicators_df = None



with col1:
    st.subheader("Price / Candlestick")
    if loaded and indicators_df is not None:
        d = indicators_df.copy()

        # Main candlestick + overlays
        fig = go.Figure()

        fig.add_trace(go.Candlestick(
    x=d.index,
    open=d["open"],
    high=d["high"],
    low=d["low"],
    close=d["close"],
    name="Price",
    increasing=dict(line=dict(color="#2e7d32"), fillcolor="#2e7d32"),
    decreasing=dict(line=dict(color="#f57c00"), fillcolor="#f57c00"),
    showlegend=False
))

        # Overlay EMAs / VWAP if selected
        if loaded_indicators.get("ema9", False) and "ema9" in d.columns:
            fig.add_trace(go.Scatter(x=d.index, y=d["ema9"], mode="lines", name="EMA 9",
                                     line=dict(color="#ff9800", width=1.5), hoverinfo="skip"))
        if loaded_indicators.get("ema21", False) and "ema21" in d.columns:
            fig.add_trace(go.Scatter(x=d.index, y=d["ema21"], mode="lines", name="EMA 21",
                                     line=dict(color="#4caf50", width=1.5), hoverinfo="skip"))
        if loaded_indicators.get("vwap", False) and "vwap" in d.columns:
            fig.add_trace(go.Scatter(x=d.index, y=d["vwap"], mode="lines", name="VWAP",
                                     line=dict(color="#1976d2", width=1.25, dash="dash"), hoverinfo="skip"))

        # Layout tweaks
        fig.update_layout(height=520, margin=dict(l=10, r=10, t=30, b=10),
                          xaxis_rangeslider_visible=False, paper_bgcolor="rgba(0,0,0,0)",
                          plot_bgcolor="rgba(0,0,0,0)")

        st.plotly_chart(fig, use_container_width=True)

        # RSI subplot below candlestick (if enabled)
        if loaded_indicators.get("rsi", False) and "rsi" in d.columns:
            r_fig = go.Figure()
            r_fig.add_trace(go.Scatter(x=d.index, y=d["rsi"], name="RSI", line=dict(color="#ff5722")))
            r_fig.update_layout(height=180, margin=dict(l=10, r=10, t=10, b=10),
                                yaxis=dict(range=[0, 100]), paper_bgcolor="rgba(0,0,0,0)",
                                plot_bgcolor="rgba(0,0,0,0)")
            st.plotly_chart(r_fig, use_container_width=True)
    else:
        st.info(f"No price CSV found at `{price_path}`. Use the sidebar button 'Create sample price CSV' to create sample data.")

